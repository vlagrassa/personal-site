{% from '_macros/lang.j2' import set_lang, render_lang_object with context %}
{% from '_macros/blog.j2' import render_blog_tag %}


{% macro render_searchbar_label(id, label) %}
  {% if label is mapping %}
    <label for="{{id}}-input">
    {% for l, t in label.items() %}
      <span {{ set_lang(l) }}>{{ t }}</span>
    {% endfor %}
    </label>
  {% elif label %}
    <label for="{{id}}-input">{{label}}</label>
  {% endif %}
{% endmacro %}


{% macro render_searchbar(id=none, oninput=none, label=none, class='', searchbar_class='') %}
  <div id="{{id}}-container" class="searchbar-container {{class}}">
    <div id="{{id}}-searchbar" class="searchbar {{ searchbar_class }}">
      <input id="{{id}}-input" title="" type="text">
    </div>
    {{ render_searchbar_label(id, label) }}
  </div>
  <script type="module">
    const input_el = document.getElementById('{{id}}-input');

    input_el.addEventListener('input', (event) => {
      const value = event.srcElement.value;
      document.getElementById("{{id}}-container").classList.toggle('has-value', !!value);
      {% if oninput %} {{ oninput }}(value) {% endif %}
    });

    input_el.addEventListener('keydown', (event) => {
      if (event.code === 'Escape') {
        input_el.blur();
      }
      if (event.code === 'Enter') {
        event.preventDefault();
      }
    })
  </script>
{% endmacro %}


{% macro render_searchbar_select(id=none, oninput=none, label=none, class='', options=none) %}
  {{ render_searchbar(id, oninput=none, label=label, class=class, searchbar_class='searchbar-tags') }}

  <div id="{{id}}-options-container" class="collapse multi-collapse" style="transform: translateY(-3px);">
    <div class="card rounded-top-0 overflow-hidden">
      {% for option in options %}
      <button id="{{id}}-option-{{option.id}}" class="btn btn-light rounded-0 m-0 w-100">
        <small>{{ render_lang_object(option.name) }}</small>
      </button>
      {% endfor %}
    </div>
  </div>

  <script type="module">
    const input_el     = document.getElementById('{{id}}-input');
    const container_el = document.getElementById('{{id}}-container');
    const options_el   = document.getElementById('{{id}}-options-container');

    container_el.appendChild(options_el);

    const options_container = new bootstrap.Collapse('#{{id}}-options-container', {
      toggle: false,
    });
    let options_container_timeout;

    const options = {
      {%- for option in options %}
      '{{ option.id }}': '{{option.name.en}}',
      {%- endfor %}
    };

    input_el.onfocus = (event) => {
      clearTimeout(options_container_timeout);
      options_container.show();
    }

    input_el.onclick = (event) => {
      clearTimeout(options_container_timeout);
      options_container.show();
    }

    input_el.onblur = (event) => {
      options_container_timeout = setTimeout(() => {
        if (!container_el.contains(document.activeElement)) {
          options_container.hide();
        }
      }, 50);
    }

    input_el.addEventListener('input', (e) => {
      filter_dropdown(e.target.value);
    })

    function filter_dropdown(val) {
      val = val.toLowerCase();

      Object.entries(options).forEach(([id, name]) => {
        document.getElementById(`{{id}}-option-${id}`).classList.toggle('hide', !name.toLowerCase().includes(val));
      });

      {% if oninput %}{{ oninput }}(val);{% endif %}
    }

    function select(option) {
      input_el.value = selections[option];
      container_el.classList.toggle('has-value', !!input_el.value);
      input_el.focus();
      input_el.blur();
      filter_dropdown(input_el.value);
    }

    Object.entries(options).forEach(([id, name]) => {
      document.getElementById(`{{id}}-option-${id}`).onclick = () => {select(id);};
    });
  </script>
{% endmacro %}


{# TODO: Handle enter, backspace #}
{% macro render_searchbar_tags(id=none, oninput=none, label=none, class='', tags=none) %}
  {{ render_searchbar(id, oninput=none, label=label, class=class, searchbar_class='searchbar-tags') }}

  <div id="{{id}}-options-container" class="collapse multi-collapse" style="transform: translateY(-3px);">
    <div class="card rounded-top-0">
      <div class="card-body">
        <div id="{{id}}-options" class="text-start d-flex flex-wrap align-items-center" style="gap: 3px;">
          {%- for tag in tags %}
          {{ render_blog_tag(tag, id=id+"-tag-"+tag.id) }}
          {%- endfor %}
        </div>
        <button class="btn badge btn-clear w-100 mt-2" aria-label="Clear" onclick="remove_tag()">Clear</button>
      </div>
    </div>
  </div>

  <script type="module">
    const input_el     = document.getElementById('{{id}}-input');
    const container_el = document.getElementById('{{id}}-container');
    const options_el   = document.getElementById('{{id}}-options-container');

    let tag_selection = [];

    const tag_ids = [
      {%- for tag in tags %}'{{ tag.id }}',{% endfor %}
    ];

    container_el.appendChild(options_el);

    const options_container = new bootstrap.Collapse('#{{id}}-options-container', {
      toggle: false,
    });
    let options_container_timeout;

    input_el.onfocus = (event) => {
      clearTimeout(options_container_timeout);
      options_container.show();
    }

    input_el.onclick = (event) => {
      clearTimeout(options_container_timeout);
      options_container.show();
    }

    input_el.onblur = (event) => {
      options_container_timeout = setTimeout(() => {
        if (!container_el.contains(document.activeElement)) {
          options_container.hide();
        }
      }, 50);
    }

    input_el.addEventListener('input', (event) => {
      filter_tags(event.target.value);
    })

    input_el.addEventListener('keydown', (event) => {
      if (event.code === 'Enter') {
        console.log('Enter!');
        event.preventDefault();
      }
      if (event.code === 'Backspace') {
        if (input_el.value.length === 0) {
          remove_tag( tag_selection[tag_selection.length-1] )
        }
      }
    })

    input_el.addEventListener('add_tag', ({detail}) => {
      add_tag(detail.tag_id);
    })

    tag_ids.forEach(tag_id => {
      document.getElementById(`{{id}}-tag-${tag_id}`).onclick = (e) => {
        if (options_el.contains(e.target)) {
          add_tag(tag_id);
        } else {
          remove_tag(tag_id);
        }
      };
    })


    function add_tag_el(tag) {
      const parentElement = document.getElementById('{{id}}-searchbar');
      const buttonElement = document.getElementById(`{{id}}-tag-${tag}`);
      parentElement.insertBefore(buttonElement, parentElement.childNodes[parentElement.childNodes.length - 2]);
    }

    function remove_tag_el(tag) {
      const parentElement = document.getElementById('{{id}}-options');
      const buttonElement = document.getElementById(`{{id}}-tag-${tag}`);
      parentElement.appendChild(buttonElement);
    }

    function update_input_el(clear = false) {
      const input_el = document.getElementById('{{id}}-input');
      if (clear) input_el.value = '';
      filter_tags(input_el.value);
      input_el.focus();
    }

    function add_tag(tag) {
      tag_selection.push(tag);
      {{ oninput }}(tag_selection);

      add_tag_el(tag);
      update_input_el(true);
    }

    function remove_tag(tag) {
      if (tag) {
        tag_selection = tag_selection.filter((val) => val !== tag);
      }
      else {
        tag_selection.forEach((t) => remove_tag_el(t));
        tag_selection = [];
      }
      {{ oninput }}(tag_selection);

      if (tag) remove_tag_el(tag);
      update_input_el(false);
    }

    function filter_tags(value) {
      document.getElementById("{{id}}-container").classList.toggle('has-value', !!(value || tag_selection.length));

      Array.from(document.getElementById('{{id}}-options').children).forEach((el) => {
        if (!value) {
          el.classList.remove('hide');
        }
        else {
          el.classList.toggle('hide', !el.dataset.tag.toLowerCase().includes(value.toLowerCase()));
        }
      });
    }
  </script>
{% endmacro %}
