{% from '_macros/lang.j2' import set_lang, render_lang_object with context %}


{%- macro get_page_title(lang, html=false) %}
{%- if tab_title %}{{ tab_title[lang] }}{% elif title %}{{ title[lang] }}{% endif %} {% if html %}&#x2B26;{% else %}⬦{% endif %} vlagrassa.dev
{%- endmacro %}


{#
  Render the site logo, with optional extra class(es) and hover function.
#}
{% macro render_logo(classes=None, hover=None) -%}
<h1
    class="my-logo{% if class %} {{class}}{% endif %}"
    {% if hover %}
    onmouseenter="{{hover}}(event, this, true)" onmouseleave="{{hover}}(event, this, false)" onmousemove ="{{hover}}(event, this, null)"
    {% endif %}
>vlɒgrɒssɒ</h1>
{%- endmacro %}


{#
  Render a list of section pages as header buttons, separated by the given character.
#}
{% macro render_sections(sections, sep="&#x2B26;") %}
  {% for section in sections %}
  {% if loop.index0 > 0 %}
    <div class="header-separator">{{sep}}</div>
  {% endif %}
  <div class="header-button">
    <a class="underline-hover-text" {% if section.link %}href="{{section.link}}"{% endif %}>
      {{ render_lang_object(section.title) }}
    </a>
    <div class="header-button-underline"></div>
  </div>
  {% endfor %}
{% endmacro %}


{#
  Render a list of links as a responsive set of slashes.
#}
{% macro render_links(links, closed_width, open_width) %}
  {% for link in links %}
    <a href="{{ link.link_external }}" class="slice" style="background-color: #{{link.bg_color_hex}};" onmouseenter="openicon(this)" onmouseleave="closeicon(this)" onfocus="openicon(this)" onblur="closeicon(this)">
      <img title="{{link.title}}" height="32px" width="40px" style="object-fit: contain;" src="{{ url_for('static', filename='logos/' + link.id + '/logo-dark.png') }}">
    </a>
  {% endfor %}
  <script>
    const icons = Array.from(document.getElementsByClassName('slice'));
    icons.forEach(element => {
      element.style.setProperty('--w', '{{closed_width}}px');
    })

    function openicon(iconEl) {
      iconEl.style.setProperty('--w', '{{open_width}}px');
      {%- with total_width = links|length * closed_width %}
      const target_width = {{total_width - open_width}} / ({{links|length}} - 1);
      icons.forEach(element => {
        if (element != iconEl) {
          element.style.setProperty('--w', target_width + 'px');
        }
      });
      {%- endwith %}
    }

    function closeicon(iconEl) {
      icons.forEach(element => {
        element.style.setProperty('--w', '{{closed_width}}px');
      });
    }
  </script>
{% endmacro %}


{#
  Render a button in the footer menu.
#}
{% macro render_footer_button(id, icon, name, class='') %}
  {% if not icon is string %}
  {% set alt_icon = icon[1] %}
  {% set icon = icon[0] %}
  {% else %}
  {% set alt_icon = none %}
  {% endif %}
  <span
    id="footer-{{ id }}" class="material-symbols-outlined footer-icon {{class}}"
    data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" data-bs-title="<span class='font-{{ lang }}'>{{ name[lang] }}</span>"
  >
    {{ icon }}
  </span>

  <script type="module">
    const tooltip = bootstrap.Tooltip.getInstance('#footer-{{ id }}') // Returns a Bootstrap tooltip instance
    document.addEventListener('change-settings', (({detail}) => {
      const titles = {{ dict(name) }};
      if (detail.language) {
        tooltip.setContent({ '.tooltip-inner': `<span class="font-${detail.language}">${titles[detail.language]}</span>` });
      }
    }))

    {% if alt_icon %}
    const icon_el = document.getElementById('footer-{{ id }}');
    icon_el.onmouseenter = () => {
      icon_el.innerHTML = '{{ alt_icon }}';
    }
    icon_el.onmouseleave = () => {
      icon_el.innerHTML = '{{ icon }}';
    }
    {% endif %}
  </script>
{% endmacro %}


{#
  Render a button in the footer menu that will toggle between options.
#}
{% macro render_footer_button_toggle( id, icon_1, icon_2 ) %}

  <div class="footer-icon-container">
    <span style="transition: transform 0.1s;">
      {{ render_footer_button( id + '-' + icon_1[0], *icon_1[1:] ) }}
    </span>
    <span style="position: absolute; top: 0; left: 0; transition: transform 0.1s;">
      {{ render_footer_button( id + '-' + icon_2[0], *icon_2[1:] ) }}
    </span>
  </div>

  <script type="module">
    const el_1 = document.getElementById('footer-{{ id }}-{{ icon_1[0] }}');
    const el_2 = document.getElementById('footer-{{ id }}-{{ icon_2[0] }}');

    function show_el(el)  {
      el.classList.remove('footer-icon-offscreen');
      el.parentElement.classList.remove('footer-icon-container-offscreen');
    }

    function hide_el(el) {
      el.classList.add('footer-icon-offscreen');
      el.parentElement.classList.add('footer-icon-container-offscreen');
    }

    el_1.onclick = () => {
      hide_el(el_1);
      show_el(el_2);
      change_settings({ "{{ id }}": "{{ icon_2[0] }}" })
    }

    el_2.onclick = () => {
      hide_el(el_2);
      show_el(el_1);
      change_settings({ "{{ id }}": "{{ icon_1[0] }}" })
    }

    hide_el(el_2);
    change_settings({ "{{ id }}": "{{ icon_1[0] }}" })
  </script>
{% endmacro %}


{#
  Render a button in the footer menu with an associated offcanvas menu.
#}
{% macro render_footer_button_menu(id, icon, name) %}
  <a data-bs-toggle="offcanvas" href="#select-{{ id }}" role="button" aria-controls="select-{{ id }}">
    {{ render_footer_button(id, icon, name) }}
  </a>

  {# Offcanvas menu #}
  <div id="select-{{ id }}" class="offcanvas offcanvas-bottom offcanvas-footer-menu rounded-top" tabindex="-1" aria-labelledby="select-{{ id }}-label">
    <div class="offcanvas-header justify-content-center">
      <h5 class="offcanvas-title text-center mt-1" id="select-{{ id }}-label">
        {{ render_lang_object(name) }}
      </h5>
      {# <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button> #}
    </div>
    {{ caller() }}
  </div>

  {# Move the offcanvas element to the body #}
  <script>
    document.body.appendChild(document.getElementById('select-{{ id }}'));
  </script>
{% endmacro %}
