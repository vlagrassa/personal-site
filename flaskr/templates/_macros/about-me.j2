{% from '_macros/utils.j2' import render_toggle_button_plus, loader %}
{% from '_macros/lang.j2'  import render_lang_object with context %}



{%- macro render_basic_info(key, value) %}
<dt class="text-end">{{ key }}</dt><dd class="mb-0">{{ value }}</dd>
{%- endmacro %}



{%- macro render_dropdown_panel_container() %}
<div id="dropdown-panel-container" class="pb-3">
{{ caller() }}
</div>
<script type="module">

  // Logs values to console if `true`
  const DEBUG = false;

  // Directly set the height value for all the dropdown panels
  function set_panel_heights(value) {
    Array.from(document.getElementsByClassName('dropdown-panel')).forEach(panel => {
      panel.children[0].style.height = value;
    })
  }

  function compute_panel_heights() {

    // Set all panel heights to 0, so the parent element doesn't extend past its intended height
    set_panel_heights(0)

    // Get the container element
    const parent = document.getElementById('dropdown-panel-container').parentElement;
    const parent_height = parent.getBoundingClientRect().height;

    // Get the combined height of all sibling elements in the column, excluding the dropdown panel container
    const siblings = Array.from(parent.children).filter(el => el.id !== 'dropdown-panel-container');
    const sibling_heights = siblings.reduce(((prev, next) => prev + next.getBoundingClientRect().height), 0);

    // Get panel container element and all open panel bodies
    const open_panels = Array.from(document.getElementsByClassName('dropdown-panel')).filter(el => el.classList.contains('show'));
    const open_panel_heights = open_panels.reduce(((acc, el) => acc + el.getBoundingClientRect().height), 0);

    // Get the height of the dropdown container, excluding the bodies of any currently open panel(s)
    const container = document.getElementById('dropdown-panel-container');
    const container_height = container.getBoundingClientRect().height - open_panel_heights;

    // Compute the target height
    const target_height = parent_height - sibling_heights - container_height;

    // Optionally print out the computed values
    if (DEBUG) {
      console.log('parent: ', parent, parent_height)
      console.log('siblings: ', siblings, sibling_heights)
      console.log('container: ', container, container.getBoundingClientRect().height, container_height)
      console.log('open panels: ', open_panels, open_panel_heights)
    }

    // Set all the panel heights to the target value
    set_panel_heights(`${target_height}px`);
  }

  // Set the panel heights and recompute any time the window size changes
  compute_panel_heights();
  window.addEventListener('resize', e => {
    compute_panel_heights();
  });
</script>
{%- endmacro %}


{%- macro render_dropdown_panel(title, start_open=false, overflow=true) %}
{%- set dropdown_id = 'dropdown-panel-' + title.replace(' ', '-') %}
<div class="col-12">
  <div class="card double-outline title-bottom px-3 py-2 mt-3">
    <div class="position-relative">
      <h5 class="card-title mt-0">{{ title }}</h5>
      <div class="me-1" style="position: absolute; right: 0; bottom: -0.2em;">
        {{ render_toggle_button_plus('#' + dropdown_id, 'accordion', start_open=start_open, size=4) }}
      </div>
    </div>
    <div id="{{ dropdown_id }}"
      class="card-body p-0 row dropdown-panel accordion-collapse collapse {% if start_open %}show{% endif %}"
      data-bs-parent="#dropdown-panel-container"
    >
      <div class="pt-1 pb-2" style="height: 0; {% if overflow %}overflow-y: scroll;{% endif %}">
        {{ caller() }}
      </div>
    </div>
  </div>
</div>
{%- endmacro %}


{%- macro render_qualification(title, source, date) %}
<dt class="text-start mb-1">{{ title }}</dt>
<dd class="text-end fst-italic">{{ source }} ({{ date }})</dd>
{%- endmacro %}


{%- macro render_score_group(score_group) %}
<div class="score-group-container text-start mb-2">

  {# Header #}
  <div class="d-flex w-100 justify-content-between">
    <h6 class="mb-1">{{ render_lang_object(score_group.title) }}</h6>
    {%- if score_group.link %}
    <a href="{{ score_group.link }}" target="_blank">
      <span class="material-symbols-outlined material-symbols-inline">open_in_new</span>
    </a>
    {%- endif %}
  </div>

  {# Values #}
  <div style="border-left: 1px solid var(--color-off-black);" class="text-start mx-2 ps-2">
    <dl>
    {%- for score in score_group.scores %}
    <div class="row score-row py-1">
      <dt class="col-9 mb-0">{{ render_lang_object(score.title) }}</dt>
      <dd class="col-3 mb-0 text-end">{{ score.score }}</dd>
    </div>
    {%- endfor %}
    </dl>
  </div>

</div>
{%- endmacro %}



{%- macro render_language_entry(label, value) %}
<tr>
  <th>{{ label }}</th>
  <td>
    <span class="bar-chart-item" data-value="{{ value }}" aria-label="{{ value }}"></span>
  </td>
</tr>
{%- endmacro %}

{%- macro render_human_language_entry(language, level) %}
<div class="d-inline">{{ language }}&nbsp;<span class="text-body-secondary">({{ level }})</span></div>
{%- endmacro %}


{%- macro render_vis_choice(title, vis_id) %}
<div class="mt-3 col-3">
  <a class="vis-choice-button" data-vis-id="{{ vis_id }}" href="javascript:render_graph('{{ vis_id }}')" title='Graph my {{ title["en"] | lower }}'>
  <div class="card double-outline title-bottom px-1 py-2">
    <h5 class="card-title mt-0" style="font-size: 0.8rem;">
      {{ render_lang_object(title) }}
    </h5>
  </div>
  </a>
</div>
{%- endmacro %}


{%- macro render_big_number(element_id, label) %}
<div class="mt-3 col-4">
  <div class="card double-outline title-bottom px-2 py-2">
    <h5 class="card-title" style="line-height: 1em;"><small>{{ label }}</small></h5>
    <div class="card-body p-0 row">
      <span id="{{element_id}}" class="m-0 fs-4 font-mono" style="line-height: 1.4em; color: var(--color-secondary-3)">
        {{ loader() }}
      </span>
    </div>
  </div>
</div>
{%- endmacro %}



{%- macro render_help_button(section_id, title) %}
<li class="d-inline-block">
  <a id="help-button-{{ section_id }}"
    href="#"
    class="help-section-button collapsed"
    data-bs-toggle="collapse" data-bs-target="#help-section-{{ section_id }}"
  >{{ render_lang_object( title ) }}</a>
</li>
{%- endmacro %}

{%- macro render_help_section(section_id, title) %}
<div id="help-section-{{ section_id }}" class="help-section accordion-collapse collapse" data-bs-parent="#help-accordion">
  <div style="height: 1em"></div>
  <hr />
  <h3 class="fs-5 text-center">{{ render_lang_object(title) }}</h3>
  {{ caller () }}
  <hr />
</div>
{%- endmacro %}
